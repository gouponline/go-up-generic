This is gnugo.info, produced by makeinfo version 4.0 from gnugo.texi.


File: gnugo.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

GNU GO
******

   This file documents `GNU Go', a Go program and its sources.  This is
Edition 1.0 of the `GNU Go Program Documentation'

   Copyright 1999 and 2000 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled "Copying" and "GNU General Public License"
are included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.

* Menu:

* Introduction::                What is GNU Go ?
* Copying::                     The GNU General Public License
* User Guide::                  How to install and use GNU Go
* Overview::                    Overview of the GNU Go engine
* Analyzing::                   Analyzing an sgf game with GNU Go
* Dragon::                      Dragons and Worms
* Eyes::                        Eyes and half eyes
* Moyo::                        Estimation of Moyos : Bouzy's 5/21 algorithm
* Patterns::                    Pattern database
* Reading::                     GNU Go's reading
* Utility Functions::           Functions from `utils.c'
* End Game::                    The end game strategy
* Regression::                  Regression testing
* Concept Index::               Concept Index
* Functions Index::             Functions Index


File: gnugo.info,  Node: Introduction,  Next: Copying,  Prev: Top,  Up: Top

Introduction
************

   This is GNU Go, a Go program. Development versions of GNU Go may be
found at <http://www.gnu.org/software/gnugo/devel.html>. Contact us at
<gnugo@gnu.org> if you are interested in helping.

* Menu:

* Copyright::                   Copyright
* Authors::                     The Authors of GNU Go
* Thanks::			Acknowledgements
* News::                        Enhancements from last version
* TODO::                        The GNU Go Task list


File: gnugo.info,  Node: Copyright,  Next: Authors,  Prev: Introduction,  Up: Introduction

Copyrights
==========

   Copyright 1999 and 2000 by the Free Software Foundation except for
the files `gmp.c' and `gmp.h', which are copyrighted by Bill Shubert
(<wms@hevanet.com>).

   All files are under the GNU General Public License (*note Copying::),
except `gmp.c' and `gmp.h', the files `interface/html/*' and
`win/makefile.win'. The two files `gmp.c' and `gmp.h' are in the public
domain and are free for unrestricted use. The files `interface/html/*'
are not part of GNU Go but are a separate program and are included in
the distribution for the convenience of anyone looking for a CGI
interface to GNU Go. They were placed in the public domain by their
author, Douglas Ridgway, and are free for unrestricted use. The file
`win/makefile.win' is also in the public domain and is free for
unrestricted use.


File: gnugo.info,  Node: Authors,  Next: Thanks,  Prev: Copyright,  Up: Introduction

Authors
=======

   GNU Go authors (in chronological order of contribution) are Man Li,
Daniel Bump, David Denholm, Gunnar Farneback, Nils Lohner, Jerome
Dumonteil, Tommy Thorn, Nicklas Ekstrand, Inge Wallin, Thomas Traber,
Douglas Ridgway, Teun Burgers, Tangay Urvoy and Thien-Thi Nguyen.


File: gnugo.info,  Node: Thanks,  Next: News,  Prev: Authors,  Up: Introduction

Thanks
======

   We would like to thank Jean-Louis Martineau, Piotr Lakomy and Paul
Leonard for helpful correspondence. Thanks to everyone who stepped on a
bug (and sent us a report)!

   Thanks to Peter Gucwa, Heikki Levanto, Michael Margolis and Gary Boos
for help with Visual C++.

   We would like to thank Stuart Cracraft, Richard Stallman and Man Li
for their interest in making this program a part of GNU, William
Shubert for writing CGoban and `gmp.c' and Rene Grothmann for Jago.


File: gnugo.info,  Node: News,  Next: TODO,  Prev: Thanks,  Up: Introduction

What's new ?
============

New in 2.6 (since 2.4):
-----------------------

   * stronger than 2.4

   * more portable code

   * Texinfo documentation

   * Emacs mode

New in 2.4 (since 2.0):
-----------------------

   * stronger: able to give GNU Go 2.0 a 5 stone handicap
        - life and death evaluation drastically improved

        - more efficient and accurate reading

        - (small) joseki database

        - takes influence and territory into account

   * Ascii interface as an alternative to CGoban

   * uses GNU configure

   * undo supported

   * man page

   * expanded pattern database

   * autohelpers for patterns

   * joseki library in Smart Go Format

   * fuseki module

   * backfilling and numerous other improvements to reading code

   * algorithms for estimating territory and influence

   * eye_finder module uses a static algorithm for life and death

   * eyeshape database

   * connection database

   * reading code uses Zobrist hashing and other speedups

   * greater modularity

   * documentation of key algorithms

   * expanded support for Smart Go Format

   * various debugging tools


File: gnugo.info,  Node: TODO,  Prev: News,  Up: Introduction

The GNU Go Task List
====================

   You can help make GNU GO the best Go program.

   This is a task-list for anyone who is interested in helping with GNU
Go. If you want to work on such a project you should correspond with us
until we reach a common vision of how the feature will work!

   A note about copyright. Before any code can be accepted as a part of
the official release of GNU Go, the Free Software Foundation will want
you to sign a copyright disclaimer. Please contact the GNU Go
maintainer, Daniel Bump (<bump@math.stanford.edu>), to get more
information and the papers to sign.

   Below is a list of things YOU could work on. We are already working
on some of these tasks, but don't let that stop you. Please contact us
or the person assigned to task for further discussion.

   1. If you can, send us bug FIXES as well as bug reports. If you see
some bad behavior, figure out what causes it, and what to do about
fixing it. And send us a patch! If you find an interesting bug and
cannot tell us how to fix it, we would be happy to have you tell us
about it anyway. Send us the sgf file (if possible) and attach other
relevant information, such as the GNU Go version number. In cases of
assertion failures and segmentation faults we probably want to know
what operating system and compiler you were using, in order to
determine if the problem is platform dependent.

   2. Tuning the pattern database. This is a sort of art. It is not
necessary to do any programming to do this since many of the patterns
do not require helpers, or can be handled using autohelpers.

   We would like it if a few more Dan level players would learn this
skill.

   3. The reading code assumes that a string with five liberties is
safe.  Sometimes this leads to expanding a dead group into enemy
territory, a simple waste. An improvement in strength would result from
giving heuristics for the strategical viability of a group, based on
moyo/escape route considerations. This is also useful for deciding
whether a cut is reasonable or needs defending against.

   4. The escape potential of a group is today estimated by counting
fourth order liberties. While this isn't completely unreasonable, it's
also not accurate enough anymore. An improved implementation might use
pattern matching (with autohelpers to assist with reading) to identify
running moves and ways to break through enclosure.

   5. Semeai module is vastly in need of improvement. In fact, semeai
can probably be only analyzed by reading to discover what backfilling is
needed before we can make atari. Also, semeai module should be able to
change the status of dragons.

   6. The eye space evaluation doesn't work very well for semi-open
spaces along the edges. An improvement here might require extending the
basic "local game" model for life and death analysis, as described in
*Note Eyes::.

   7. The eye space evaluation knows about "chimeras", positions where
one player can make two eyes in one move but the opponent also can
destroy both in one move. This information is, however, currently not
used in the higher levels of life and death reasoning. There are also
other interesting positions, such as moves making an eye in sente (i.e.
by threatening to make another eye), that would need some
consideration. For inspiration you may wish to read the paper "Eyespace
Values in Go" by Howard Landman. The paper is linked from the GNU Go
development web page.

   8. The eye space evaluation would also need to learn about local
games ending in various kinds of kos.

   9. Life and death reading. The eyespace evaluation is currently
completely static. This has the advantage of being very fast, but
needing a fairly large pattern database. To incorporate various life
and death subtleties in this scheme may require enlarging the pattern
database more than we want and/or being very tricky to get right. An
alternative is to use reading to deal with some of the complications
and then perform static evaluation on the nodes.

   10. More life and death reading. One could also consider using
reading to fully play out the local games (*note Eyes::). While this
probably would be too slow to employ in actual play, it would still be
useful for verifying and/or automatically generating the eye space
database. (Inge Wallin has started working on this.)

   11. Very much time in the reading is spent counting liberties. It's
possible that the reading could be made faster by keeping track of the
liberty counts while doing and undoing moves. There is, however, a
certain amount of overhead involved here, so a proof of concept would
definitely be necessary.


File: gnugo.info,  Node: Copying,  Next: User Guide,  Prev: Introduction,  Up: Top

GNU GENERAL PUBLIC LICENSE
**************************

                         Version 2, June 1991

     Copyright (C) 1989, 1991 Free Software Foundation, Inc.
     59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     
     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

Preamble
========

   The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it in
new free programs; and that you know you can do these things.

   To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

   We protect your rights with two steps: (1) copyright the software,
and (2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

   Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

   Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

   The precise terms and conditions for copying, distribution and
modification follow.

    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains a
     notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program",
     below, refers to any such program or work, and a "work based on
     the Program" means either the Program or any derivative work under
     copyright law: that is to say, a work containing the Program or a
     portion of it, either verbatim or with modifications and/or
     translated into another language.  (Hereinafter, translation is
     included without limitation in the term "modification".)  Each
     licensee is addressed as "you".

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running the Program is not restricted, and the output from the
     Program is covered only if its contents constitute a work based on
     the Program (independent of having been made by running the
     Program).  Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any
     warranty; and give any other recipients of the Program a copy of
     this License along with the Program.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. You must cause the modified files to carry prominent notices
          stating that you changed the files and the date of any change.

       b. You must cause any work that you distribute or publish, that
          in whole or in part contains or is derived from the Program
          or any part thereof, to be licensed as a whole at no charge
          to all third parties under the terms of this License.

       c. If the modified program normally reads commands interactively
          when run, you must cause it, when started running for such
          interactive use in the most ordinary way, to print or display
          an announcement including an appropriate copyright notice and
          a notice that there is no warranty (or else, saying that you
          provide a warranty) and that users may redistribute the
          program under these conditions, and telling the user how to
          view a copy of this License.  (Exception: if the Program
          itself is interactive but does not normally print such an
          announcement, your work based on the Program is not required
          to print an announcement.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Program, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not
     apply to those sections when you distribute them as separate
     works.  But when you distribute the same sections as part of a
     whole which is a work based on the Program, the distribution of
     the whole must be on the terms of this License, whose permissions
     for other licensees extend to the entire whole, and thus to each
     and every part regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Program.

     In addition, mere aggregation of another work not based on the
     Program with the Program (or with a work based on the Program) on
     a volume of a storage or distribution medium does not bring the
     other work under the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms
     of Sections 1 and 2 above provided that you also do one of the
     following:

       a. Accompany it with the complete corresponding machine-readable
          source code, which must be distributed under the terms of
          Sections 1 and 2 above on a medium customarily used for
          software interchange; or,

       b. Accompany it with a written offer, valid for at least three
          years, to give any third party, for a charge no more than your
          cost of physically performing source distribution, a complete
          machine-readable copy of the corresponding source code, to be
          distributed under the terms of Sections 1 and 2 above on a
          medium customarily used for software interchange; or,

       c. Accompany it with the information you received as to the offer
          to distribute corresponding source code.  (This alternative is
          allowed only for noncommercial distribution and only if you
          received the program in object code or executable form with
          such an offer, in accord with Subsection b above.)

     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete
     source code means all the source code for all modules it contains,
     plus any associated interface definition files, plus the scripts
     used to control compilation and installation of the executable.
     However, as a special exception, the source code distributed need
     not include anything that is normally distributed (in either
     source or binary form) with the major components (compiler,
     kernel, and so on) of the operating system on which the executable
     runs, unless that component itself accompanies the executable.

     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

  5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Program or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Program (or any work
     based on the Program), you indicate your acceptance of this
     License to do so, and all its terms and conditions for copying,
     distributing or modifying the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program
     subject to these terms and conditions.  You may not impose any
     further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties to this License.

  7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Program at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Program by all those who
     receive copies directly or indirectly through you, then the only
     way you could satisfy both it and this License would be to refrain
     entirely from distribution of the Program.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Program under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  9. The Free Software Foundation may publish revised and/or new
     versions of the General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies a version number of this License which applies
     to it and "any later version", you have the option of following
     the terms and conditions either of that version or of any later
     version published by the Free Software Foundation.  If the Program
     does not specify a version number of this License, you may choose
     any version ever published by the Free Software Foundation.

 10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the
     author to ask for permission.  For software which is copyrighted
     by the Free Software Foundation, write to the Free Software
     Foundation; we sometimes make exceptions for this.  Our decision
     will be guided by the two goals of preserving the free status of
     all derivatives of our free software and of promoting the sharing
     and reuse of software generally.

                                NO WARRANTY

 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
     HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
     WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT
     NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
     FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE
     QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY
     SERVICING, REPAIR OR CORRECTION.

 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY
     OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

                      END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Programs
=============================================

   If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) 19YY  NAME OF AUTHOR
     
     This program is free software; you can redistribute it and/or
     modify it under the terms of the GNU General Public License
     as published by the Free Software Foundation; either version 2
     of the License, or (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License along
     with this program; if not, write to the Free Software Foundation, Inc.,
     59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

   Also add information on how to contact you by electronic and paper
mail.

   If the program is interactive, make it output a short notice like
this when it starts in an interactive mode:

     Gnomovision version 69, Copyright (C) 19YY NAME OF AUTHOR
     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details
     type `show w'.  This is free software, and you are welcome
     to redistribute it under certain conditions; type `show c'
     for details.

   The hypothetical commands `show w' and `show c' should show the
appropriate parts of the General Public License.  Of course, the
commands you use may be called something other than `show w' and `show
c'; they could even be mouse-clicks or menu items--whatever suits your
program.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the program,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright
     interest in the program `Gnomovision'
     (which makes passes at compilers) written
     by James Hacker.
     
     SIGNATURE OF TY COON, 1 April 1989
     Ty Coon, President of Vice

   This General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Library General Public License instead of this License.


File: gnugo.info,  Node: User Guide,  Next: Overview,  Prev: Copying,  Up: Top

Using GNU Go
************

* Menu:

* Installation::             Installation
* Documentation::            Documentation
* CGoban::                   Running GNU Go with CGoban
* Ascii::                    The Ascii Interface
* Emacs::                    GNU Go mode in Emacs
* Jago::                     Jago
* GMP::                      The Go Modem Protocol
* SGF::                      The Smart Go Format
* Invoking GNU Go::          Command line options


File: gnugo.info,  Node: Installation,  Next: Documentation,  Prev: User Guide,  Up: User Guide

Installation
============

   In short, `./configure; make' will build GNU Go; optionally (running
as root) `make install' will put it into `/usr/local/bin' and also
install the man page. You also will probably want to install CGoban.

   Get the most recent tar file from <ftp.gnu.org> or a mirror. A list
of mirrors may be found at:

       <http://www.gnu.org/order/ftp.html>

   Untar the sources, change to the directory `gnugo-2.6/'. Now do:

       ./configure
       make

This makes a binary called `interface/gnugo'. Now (running as root) type

       make install

This will install gnugo in `/usr/local/bin/', and also install the man
page `gnugo.6' into `/usr/man/man6/'.

   There are two methods of using GNU Go. You may run it from the
command line by just typing `gnugo', but it is nicer to run it under
X-Windows using CGoban.

   Obtain the most recent version of CGoban from Bill Shubert's web
site:

       <http://www.inetarena.com/~wms/comp/cgoban>

The CGoban version number MUST be 1.9.1 at least or it won't work.
Instructions for using CGoban are elsewhere in this document *note
CGoban::.

Problems
--------

   On one GNU/Linux machine an incompatible `/usr/include/curses.h'
(from BSD) had declarations inconsistent with those in
`/usr/include/term.h'. The symptom of this problem is compilation errors
in `engine/moyo.c' and `engine/showbord.c'.

   In this case, the correct `curses.h' was found in
`/usr/include/ncurses' and a correct compilation was obtained after
changing

       #include <curses.h>

to

       #include <ncurses/curses.h>

in `engine/moyo.c' and `engine/showbord.c'. If you have a problem with
errors in `engine/moyo.c' and `engine/showbord.c' caused by curses you
should try such a remedy first. If this doesn't work, you shouldn't
curse. Run `configure --disable-color' to turn off the color option and
compile again. Another alternative if you want color is `configure
--without-curses --enable-color'. This will substitute ansi escape
sequences for curses.


File: gnugo.info,  Node: Documentation,  Next: CGoban,  Prev: Installation,  Up: User Guide

Documentation
=============

   Documentation in `doc/' consists of a man page `gnugo.6', the info
files `gnugo.info', `gnugo.info-1', ... and the Texinfo files from
which the info files are built. The Texinfo documentation contains this
User's Guide and extensive information about the algorithms of GNU Go,
for developers.

   If you want a typeset copy of the Texinfo documentation, you can
`make gnugo.dvi' or `make gnugo.ps' in the `doc/' directory.

   You can make an HTML version with the command `makeinfo --html
gnugo.texi'. Better HTML documentation may be obtained using `texi2html
-split_chapter gnugo.html'.  You can obtain the `texi2html' utility from
<http://www.mathematik.uni-kl.de/~obachman/Texi2html/>. (See also
<http://texinfo.org/texi2html/>.) Unfortunately Version 1.58 of
`texi2html' does not support the `@option' and `@command' tags. These
are supported in Version 1.60-Beta. However our current recommendation
is to use Version 1.58, and to add the lines

     	      'command', 'CODE',
     	      'option', 'SAMP',

   to the `style_map' around line 178 of the perl script.

   User documentation can be obtained by running `gnugo --help' or `man
gnugo' from any terminal, or from the Texinfo documentation.

   Documentation for developers is in the Texinfo documentation, and in
comments throughout the source. Contact us at <gnugo@gnu.org> if you are
interested in helping to develop this program.


File: gnugo.info,  Node: CGoban,  Next: Ascii,  Prev: Documentation,  Up: User Guide

Running GNU Go via CGoban
=========================

   This is an extremely nice way to run GNU Go. CGoban provides a
beautiful graphic user interface under X-Windows.

   Start CGoban. When the CGoban Control panel comes up, select "Go
Modem". You will get the Go Modem Protocol Setup. Choose one (or both)
of the players to be "Program," and fill out the box with the path to
gnugo. After clicking OK, you get the Game Setup window.  Choose "Rules
Set" to be Japanese (otherwise handicaps won't work).  Set the board
size and handicap if you want. Click OK and you are ready to go.

   In the Go Modem Protocol Setup window, when you specify the path to
GNU Go, you can give it command line options, such as -quiet to
suppress most messages. Since the Go Modem Protocol preempts standard
I/O other messages are sent to stderr, even if they are not error
messages. These will appear in the terminal from which you started
CGoban.

   Other command line options can be listed by typing `gnugo --help'
-or- `man gnugo' from any terminal.


File: gnugo.info,  Node: Ascii,  Next: Emacs,  Prev: CGoban,  Up: User Guide

Ascii Interface
===============

   Even if you do not have CGoban installed you can play with GNU Go
using its default Ascii interface. Simply type `gnugo' at the command
line, and GNU Go will draw a board. Typing `help' will give a list of
options. At the end of the game, pass twice, and GNU Go will prompt you
through the counting. You and GNU Go must agree on the dead groups--you
can toggle the status of groups to be removed, and when you are done,
GNU Go will report the score.


File: gnugo.info,  Node: Emacs,  Next: Jago,  Prev: Ascii,  Up: User Guide

GNU Go mode in Emacs
====================

   You can run GNU Go from Emacs. This has the advantage that you place
the stones using the cursor arrow keys.  This may require Emacs 20.4 or
later--it has been tested with Emacs 20.4 but does not work with Emacs
19 or Emacs 20.2.

   Load `interface/gnugo.el', either by `M-x load-file', or by copying
the file into your `site-lisp' directory and adding a line

     (autoload 'gnugo "gnugo" "GNU Go" t)

in your `.emacs' file.

   Now you may start GNU Go by `M-x gnugo'. You will be prompted for
command line options *note Invoking GNU Go::. Using these, you may set
the handicap, board size, color and komi.

   You can enter commands from the GNU Go ASCII interface after typing
`:'. For example, to take a move back, type `:back', or to list all
commands, type `:help'.

   Here are the default keybindings:

   * `Return' or `Space'
          Select point as the next move.  An error is signalled for
          invalid locations.  Illegal locations, on the other hand,
          show up in the GNUGO Console buffer.

   * `q' or `Q'
          Quit. Both Board and Console buffers are deleted.

   * `R'
          Resign.

   * `C-l'
          Refresh.  Includes restoring default window configuration.

   * `M-_'
          Bury both Board and Console buffers (when the boss is near).

   * `p'
          Pass; i.e., select no location for your move.

   * `:'
          Extended command.  Type in a string to be passed directly to
          the inferior GNUGO process."


File: gnugo.info,  Node: Jago,  Next: GMP,  Prev: Emacs,  Up: User Guide

Running GNU Go via Jago
=======================

   Jago, like CGoban is a client capable of providing GNU Go with a
graphical user interface. Unlike CGoban, it does not require X-Windows,
so it is an attractive alternative under Windows.  You will need a Java
runtime environment. Obtain Jago at

   <http://mathsrv.ku-eichstaett.de/MGF/homes/grothmann/jago/Go.html>

and follow the links there for the Java runtime environment.


File: gnugo.info,  Node: GMP,  Next: SGF,  Prev: Jago,  Up: User Guide

Go Modem Protocol
=================

   The Go Modem Protocol (GMP) was developed by Bruce Wilcox with input
from David Fotland, Anders Kierulf and others, according to the history
in

   <ftp://www.joy.ne.jp/welcome/igs/Go/programs/protocol.Z>

   Any Go program _should_ use this protocol since it is standard.
Since CGoban supports this protocol, the user interface for any Go
program can be done entirely through CGoban. The programmer can
concentrate on the real issues without worrying about drawing stones,
resizing the board and other distracting issues.


File: gnugo.info,  Node: SGF,  Next: Invoking GNU Go,  Prev: GMP,  Up: User Guide

Smart Go Format
===============

   The Smart Go Format (SGF), is the standard format for storing Go
games.  GNU Go supports both reading and writing SGF files. The SGF
specification (FF[4]) is at:

   <http://www.red-bean.com/sgf/>


File: gnugo.info,  Node: Invoking GNU Go,  Prev: SGF,  Up: User Guide

Invoking GNU Go: Command line options
=====================================

Some basic options
------------------

   * `--quiet'
          Don't print copyright and other messages

   * `-l', `--infile FILENAME'
          Load the named SGF file

   * `-L', `--until MOVE'
          Stop loading just before the indicated move is played. MOVE
          can be either the move number or location.

   * `-o', `--outfile FILENAME'
          Write sgf output to file

   * `--mode MODE'
          Force the playing mode ('ascii', 'test' or 'gmp'). The
          default is ASCII, but if no terminal is detected GMP (Go
          Modem Protocol) will be assumed. In practice this is usually
          what you want, so you may never need this option.

Options affecting strength and speed
------------------------------------

   * `-p' `--playstyle STYLE'
          Select a style of opening play. The possibilities are:
             * `standard' (default opening)

             * `no_fuseki' (fuseki module turned off)

             * `tenuki' (often plays elsewhere in the opening)

             * `fearless' (risky style of play)

             * `aggressive' (tenuki and fearless)

   * `-D', `--depth DEPTH'
          Deep reading cutoff. When reading beyond this depth (default
          14) GNU Go assumes that any string which can obtain 3
          liberties is alive. Thus GNU Go can read ladders to an
          arbitrary depth, but will miss other types of capturing moves.

   * `-B', `--backfill_depth DEPTH'
          Deep reading cutoff. Beyond this depth (default 9) GNU Go
          will no longer try backfilling moves in its reading.

   * `-F', `--fourlib_depth DEPTH'
          Deep reading cutoff. When reading beyond this depth (default
          5) GNU Go assumes that any string which can obtain 4
          liberties is alive.

   * `-K', `--ko_depth DEPTH'
          Deep reading cutoff. Beyond this depth (default 8) GNU Go no
          longer tries very hard to analyze kos.

   * `-M', `--memory MEGS'
          Memory in megabytes used for hashing (default 8). GNU Go
          stores results of its reading calculations in a Hash table.
          If the Hash table gets full, the reading continues, but more
          slowly.  The symptoms of this is that (1) there is an
          unusually complicated situation on the board and (2) GNU Go
          is playing slowly. Normally 8 megabytes is adequate to prevent
          this. However if you have ample memory, or if you have
          increased the reading depth using the `-D', `-B', `-F' or
          `-K' you may want to increase the size of the Hash cache
          using this option.

Ascii mode options:
-------------------

   * `--boardsize SIZE':  Set the board size

   * `--color COLOR':  Choose your color ('black' or 'white')

   * `--handicap NUMBER':  Choose the number of handicap stones (0-9)

   * `--komi NUM' Set the komi

Development options:
--------------------

   * `--testmode MODE'
          This option requires `-l FILENAME', implies test mode. The
          mode can be:
             * move: test at move node only

             * annotation: test at annotation node only

             * both: test at move and annotation nodes

             * game: test to see if gnugo considered each move made
          *Note Regression::.

   * `-a', `--allpats'
          Test all patterns, even those smaller in value than the
          largest move found so far. This should never affect GNU Go's
          final move, and it will make it run slower. However this can
          be very useful when "tuning" GNU Go. It causes both the
          traces and the output file (`-o') to be more informative.

   * `-T', `--printboard': colored display of dragons.
          Use RXVT or Linux Console. (*note Colored Display::)

   * `-E': colored display of eye spaces
          Use RXVT or Linux Console. (*note Colored Display::)

   * `-d', `--debug LEVEL'
          Produce debugging output. The debug level is given in
          hexadecimal, using the bits defined in the following table
          from `engine/liberty.h'.

             * DEBUG_GENERAL  0x0001

             * DEBUG_COUNT    0x0002

             * DEBUG_BOARD    0x0004

             * DEBUG_CAPTURE  0x0008

             * DEBUG_STACK    0x0010

             * DEBUG_WIND     0x0020

             * DEBUG_HELPER   0x0040

             * DEBUG_LOADSGF  0x0080

             * DEBUG_WORMS    0x0100

             * DEBUG_LADDER   0x0200

             * DEBUG_MATCHER  0x0400

             * DEBUG_DEFENDER 0x0800

             * DEBUG_ATTACKER 0x1000

             * DEBUG_BORDER   0x2000

             * DEBUG_DRAGONS  0x4000

             * DEBUG_SAVESGF  0x8000

             * DEBUG_HEY      0x10000

             * DEBUG_SEMEAI   0x20000

             * DEBUG_EYES     0x40000

   * `-H', `--hash LEVEL'
          hash (see liberty.h for bits).

   * `-w', `--worms'
          Print more information about worm data.

   * `-m', `--moyo LEVEL'
          moyo debugging, show moyo board. The LEVEL is fully
          documented elsewhere (*note Colored Display::).

   * `-b', `--benchmark NUMBER'
          benchmarking mode - can be used with `-l'.

   * `-s', `--stack'
          stack trace (for debugging purposes).

   * `-S', `--statistics'
          Print statistics (for debugging purposes).

   * `-t', `--trace'
          Print debugging information. Use twice for more detail.

   * `-r', `--seed SEED'
          Set random number seed. This can be used to guarantee that
          GNU Go will make the same decisions on multiple runs through
          the same game. If `seed' is zero, GNU Go will play a
          different game each time.

   * `--decidestring LOCATION'
          Analyze whether the string at LOCATION can be captured, and
          if so, whether it can be defended. If used with `-o', this
          will produce a variation tree in SGF.

   * `--score UNTIL'
          Requires `-l'. UNTIL can be "end", "last" or a move.
             * end  - finish the game by selfplaying from the end of
               the file until two passes

             * last - estimate territorial balance at the end of the of
               the file

             * move - load file until move is reached and estimate
               territorial balance

   * `--printsgf OUTPUT FILE'
          load SGF file, output final position (requires `-l').

Using `--analyze':
------------------

   The analyze options allow analysis of a game stored as sgf file by
using `--testmode'.  When using `--testmode' with `--analyze' move tree
variations are ignored.

   The `--analyze' option also works with `--benchmark' and `--score'.
The analyze functions will be executed on every move in `--benchmark'
and `--testmode game'.

   If used with `--analyzerfile FILENAME', the results of the analysis
are written to the file FILENAME.

   Analyzed board states on other modes:

   `--score end': gnugo analyzes every move it makes at the end of the
file until the game is finished.

   `--score last': board state at the end of the file will be analyzed

   `--score MOVE NUMBER': board state just before MOVENUM will be
analyzed

   `--score POSITION': board state just before POSITION is occupied
will be analyzed

   `--testmode annotation': board state just before the annotated node
is reached will be analyzed

description of `--analyze' options:
-----------------------------------

   * areacolor: show color of influence

   * all: switch on all analyze options

   * capture: show capturing move for all caputurable worms

   * considered: show considered moves an their values

   * defense: show defending move for all caputurable worms

   * dragoninfo: show dragon info

   * dragonstatus: the dragons are marked, status indicated

   * eyeinfo: show eye info

   * eyes: show eye space and the attacking points

   * gameinfo: show misc info (captured, territory, move values, ...)

   * moyocolor: show moyos by color

   * recommended: show moves recommended by the various modules:
     A = attacker       B = very big move       D = defender       E =
     eyefinder       F = fuseki       L = liberty filling       P =
     pattern       p = reconsidered pattern       S = semeai

   * terri: show territory from moyo.c

   * territory:show territory from dragons

   * worminfo: show worm info

   * wormliberties: show the number of liberties for each worm

   You can give more than one `--analyze' option also by concatenating
with "" or by using commas without space.

Usage examples:
---------------

     gnugo --score end --analyzerfile outputfile -l inputfile
   will create outputfile and writes the inputfile to it plus the
endgame moves for scoring and adds the result property.  If you want to
overwrite an already existing result property use `--analyze
overwrite'. This also overwrites DT, AP and RU.

     gnugo --score end --analyzerfile outputfile -l inputfile \
               --analyze dragonstatus
   same as above, but writes to outputfile the dragonstatus for every
move gnugo made from the last move in inputfile to the end of the game.

     gnugo --testmode game --analyzerfile outputfile -l inputfile \
              --analyze wormliberties
   loads inputfile and writes to outputfile the number of liberties for
each worm on every move.

     gnugo --testmode annotation --analyzerfile outputfile -l inputfile \
               --analyze capture
   loads inputfile and writes to outputfile the capturing move for each
weak group on every move followed by a annotation (*note Regression::)


File: gnugo.info,  Node: Overview,  Next: Analyzing,  Prev: User Guide,  Up: Top

GNU Go engine overview
**********************

   This document is an overview of the GNU Go internals. Further
documentation of how any one module or routine works may be found in
the comments in the source files.

* Menu:

* Definitions::                Some words used in this documentation.
* Move Generation::            How GNU Go generates the (supposedly)
                               optimal move.
* Roadmap::                    Description of the different files.
* Data Structures::            Description of the data structures.
* Coding Styles::              Coding conventions.


File: gnugo.info,  Node: Definitions,  Next: Move Generation,  Up: Overview

Definitions
===========

   In this document wherever we define a concept we use CAPITAL LETTERS
for the term being defined.

   A WORM is a maximal set of vertices on the board which are connected
along the horizontal and vertical lines, and are of the same color,
which can be `BLACK', `WHITE' or `EMPTY'. The term `EMPTY' applied to a
worm means that the worm consists of empty (unoccupied) vertices. It
does NOT mean that that the worm is the empty set. A STRING is a
nonempty worm. An empty worm is called a CAVITY.  If a subset of
vertices is contained in a worm, there is a unique worm containing it;
this is its WORM CLOSURE.

   A DRAGON is a union of strings of the same color which will be
treated as a unit. The dragons are recomputed. If two strings are in
the same dragon, it is the computer's working hypothesis that they will
live or die together and are effectively connected.

